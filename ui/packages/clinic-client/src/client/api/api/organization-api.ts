/* tslint:disable */
/* eslint-disable */
/**
 * Clinic Example API
 * This is a Clinic server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonSuccessResp } from '../models';
// @ts-ignore
import { OrgInvitesReq } from '../models';
// @ts-ignore
import { OrgListOrganizationsResp } from '../models';
// @ts-ignore
import { OrgListUsersResp } from '../models';
// @ts-ignore
import { OrgOrganization } from '../models';
// @ts-ignore
import { OrgRole } from '../models';
// @ts-ignore
import { OrgTaskStatus } from '../models';
// @ts-ignore
import { OrgUpdateOrganizationReq } from '../models';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list organization
         * @summary List the organizations
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} [query] the organization name
         * @param {string} [filter] filter condition, can be all,starred,mine
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsGet: async (xCsrfToken: string, query?: string, filter?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsGet', 'xCsrfToken', xCsrfToken)
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete Organization and data
         * @summary delete Organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDelete: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidDelete', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidDelete', 'oid', oid)
            const localVarPath = `/orgs/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get organization
         * @summary Get the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidGet: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidGet', 'oid', oid)
            const localVarPath = `/orgs/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update organization
         * @summary Update the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgUpdateOrganizationReq} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidPut: async (xCsrfToken: string, oid: string, organization: OrgUpdateOrganizationReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidPut', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidPut', 'oid', oid)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('orgsOidPut', 'organization', organization)
            const localVarPath = `/orgs/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list organization roles
         * @summary List the organizations roles
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidRolesGet: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidRolesGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidRolesGet', 'oid', oid)
            const localVarPath = `/orgs/{oid}/roles`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * unstar organization
         * @summary UnStar the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidStarDelete: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidStarDelete', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidStarDelete', 'oid', oid)
            const localVarPath = `/orgs/{oid}/star`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * star organization
         * @summary Star the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidStarPost: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidStarPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidStarPost', 'oid', oid)
            const localVarPath = `/orgs/{oid}/star`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get organization task list
         * @summary Get the organization task list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidTasksGet: async (xCsrfToken: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidTasksGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidTasksGet', 'oid', oid)
            const localVarPath = `/orgs/{oid}/tasks`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list users of the organization
         * @summary List users
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersGet: async (xCsrfToken: string, oid: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidUsersGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidUsersGet', 'oid', oid)
            const localVarPath = `/orgs/{oid}/users`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete user from organization
         * @summary Delete user from organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersIdDelete: async (xCsrfToken: string, oid: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidUsersIdDelete', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidUsersIdDelete', 'oid', oid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgsOidUsersIdDelete', 'id', id)
            const localVarPath = `/orgs/{oid}/users/{id}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update user role in organization
         * @summary Update user role in organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {OrgRole} role user role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersIdPut: async (xCsrfToken: string, oid: string, id: number, role: OrgRole, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidUsersIdPut', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidUsersIdPut', 'oid', oid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgsOidUsersIdPut', 'id', id)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('orgsOidUsersIdPut', 'role', role)
            const localVarPath = `/orgs/{oid}/users/{id}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(role, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * invite user to join the organization
         * @summary Invite user
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgInvitesReq} invite invite user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersInvitePost: async (xCsrfToken: string, oid: string, invite: OrgInvitesReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidUsersInvitePost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidUsersInvitePost', 'oid', oid)
            // verify required parameter 'invite' is not null or undefined
            assertParamExists('orgsOidUsersInvitePost', 'invite', invite)
            const localVarPath = `/orgs/{oid}/users/invite`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create organization
         * @summary Create the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {OrgOrganization} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsPost: async (xCsrfToken: string, organization: OrgOrganization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('orgsPost', 'organization', organization)
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * list organization
         * @summary List the organizations
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} [query] the organization name
         * @param {string} [filter] filter condition, can be all,starred,mine
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsGet(xCsrfToken: string, query?: string, filter?: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgListOrganizationsResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsGet(xCsrfToken, query, filter, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete Organization and data
         * @summary delete Organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidDelete(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidDelete(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get organization
         * @summary Get the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidGet(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidGet(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update organization
         * @summary Update the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgUpdateOrganizationReq} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidPut(xCsrfToken: string, oid: string, organization: OrgUpdateOrganizationReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidPut(xCsrfToken, oid, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list organization roles
         * @summary List the organizations roles
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidRolesGet(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidRolesGet(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * unstar organization
         * @summary UnStar the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidStarDelete(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidStarDelete(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * star organization
         * @summary Star the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidStarPost(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidStarPost(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get organization task list
         * @summary Get the organization task list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidTasksGet(xCsrfToken: string, oid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgTaskStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidTasksGet(xCsrfToken, oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list users of the organization
         * @summary List users
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidUsersGet(xCsrfToken: string, oid: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgListUsersResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidUsersGet(xCsrfToken, oid, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete user from organization
         * @summary Delete user from organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidUsersIdDelete(xCsrfToken: string, oid: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidUsersIdDelete(xCsrfToken, oid, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update user role in organization
         * @summary Update user role in organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {OrgRole} role user role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidUsersIdPut(xCsrfToken: string, oid: string, id: number, role: OrgRole, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidUsersIdPut(xCsrfToken, oid, id, role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * invite user to join the organization
         * @summary Invite user
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgInvitesReq} invite invite user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidUsersInvitePost(xCsrfToken: string, oid: string, invite: OrgInvitesReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidUsersInvitePost(xCsrfToken, oid, invite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create organization
         * @summary Create the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {OrgOrganization} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsPost(xCsrfToken: string, organization: OrgOrganization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsPost(xCsrfToken, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * list organization
         * @summary List the organizations
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} [query] the organization name
         * @param {string} [filter] filter condition, can be all,starred,mine
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsGet(xCsrfToken: string, query?: string, filter?: string, limit?: number, page?: number, options?: any): AxiosPromise<OrgListOrganizationsResp> {
            return localVarFp.orgsGet(xCsrfToken, query, filter, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * delete Organization and data
         * @summary delete Organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDelete(xCsrfToken: string, oid: string, options?: any): AxiosPromise<string> {
            return localVarFp.orgsOidDelete(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * get organization
         * @summary Get the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidGet(xCsrfToken: string, oid: string, options?: any): AxiosPromise<OrgOrganization> {
            return localVarFp.orgsOidGet(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * update organization
         * @summary Update the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgUpdateOrganizationReq} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidPut(xCsrfToken: string, oid: string, organization: OrgUpdateOrganizationReq, options?: any): AxiosPromise<OrgOrganization> {
            return localVarFp.orgsOidPut(xCsrfToken, oid, organization, options).then((request) => request(axios, basePath));
        },
        /**
         * list organization roles
         * @summary List the organizations roles
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidRolesGet(xCsrfToken: string, oid: string, options?: any): AxiosPromise<Array<OrgRole>> {
            return localVarFp.orgsOidRolesGet(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * unstar organization
         * @summary UnStar the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidStarDelete(xCsrfToken: string, oid: string, options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.orgsOidStarDelete(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * star organization
         * @summary Star the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidStarPost(xCsrfToken: string, oid: string, options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.orgsOidStarPost(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * get organization task list
         * @summary Get the organization task list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidTasksGet(xCsrfToken: string, oid: string, options?: any): AxiosPromise<Array<OrgTaskStatus>> {
            return localVarFp.orgsOidTasksGet(xCsrfToken, oid, options).then((request) => request(axios, basePath));
        },
        /**
         * list users of the organization
         * @summary List users
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} [limit] the count per page
         * @param {number} [page] the page index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersGet(xCsrfToken: string, oid: string, limit?: number, page?: number, options?: any): AxiosPromise<OrgListUsersResp> {
            return localVarFp.orgsOidUsersGet(xCsrfToken, oid, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * delete user from organization
         * @summary Delete user from organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersIdDelete(xCsrfToken: string, oid: string, id: number, options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.orgsOidUsersIdDelete(xCsrfToken, oid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * update user role in organization
         * @summary Update user role in organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {number} id user id
         * @param {OrgRole} role user role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersIdPut(xCsrfToken: string, oid: string, id: number, role: OrgRole, options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.orgsOidUsersIdPut(xCsrfToken, oid, id, role, options).then((request) => request(axios, basePath));
        },
        /**
         * invite user to join the organization
         * @summary Invite user
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {OrgInvitesReq} invite invite user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidUsersInvitePost(xCsrfToken: string, oid: string, invite: OrgInvitesReq, options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.orgsOidUsersInvitePost(xCsrfToken, oid, invite, options).then((request) => request(axios, basePath));
        },
        /**
         * create organization
         * @summary Create the organization
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {OrgOrganization} organization organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsPost(xCsrfToken: string, organization: OrgOrganization, options?: any): AxiosPromise<OrgOrganization> {
            return localVarFp.orgsPost(xCsrfToken, organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for orgsGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsGetRequest
 */
export interface OrganizationApiOrgsGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsGet
     */
    readonly xCsrfToken: string

    /**
     * the organization name
     * @type {string}
     * @memberof OrganizationApiOrgsGet
     */
    readonly query?: string

    /**
     * filter condition, can be all,starred,mine
     * @type {string}
     * @memberof OrganizationApiOrgsGet
     */
    readonly filter?: string

    /**
     * the count per page
     * @type {number}
     * @memberof OrganizationApiOrgsGet
     */
    readonly limit?: number

    /**
     * the page index
     * @type {number}
     * @memberof OrganizationApiOrgsGet
     */
    readonly page?: number
}

/**
 * Request parameters for orgsOidDelete operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidDeleteRequest
 */
export interface OrganizationApiOrgsOidDeleteRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidDelete
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidDelete
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidGetRequest
 */
export interface OrganizationApiOrgsOidGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidGet
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidPut operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidPutRequest
 */
export interface OrganizationApiOrgsOidPutRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidPut
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidPut
     */
    readonly oid: string

    /**
     * organization
     * @type {OrgUpdateOrganizationReq}
     * @memberof OrganizationApiOrgsOidPut
     */
    readonly organization: OrgUpdateOrganizationReq
}

/**
 * Request parameters for orgsOidRolesGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidRolesGetRequest
 */
export interface OrganizationApiOrgsOidRolesGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidRolesGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidRolesGet
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidStarDelete operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidStarDeleteRequest
 */
export interface OrganizationApiOrgsOidStarDeleteRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidStarDelete
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidStarDelete
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidStarPost operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidStarPostRequest
 */
export interface OrganizationApiOrgsOidStarPostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidStarPost
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidStarPost
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidTasksGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidTasksGetRequest
 */
export interface OrganizationApiOrgsOidTasksGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidTasksGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidTasksGet
     */
    readonly oid: string
}

/**
 * Request parameters for orgsOidUsersGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidUsersGetRequest
 */
export interface OrganizationApiOrgsOidUsersGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersGet
     */
    readonly oid: string

    /**
     * the count per page
     * @type {number}
     * @memberof OrganizationApiOrgsOidUsersGet
     */
    readonly limit?: number

    /**
     * the page index
     * @type {number}
     * @memberof OrganizationApiOrgsOidUsersGet
     */
    readonly page?: number
}

/**
 * Request parameters for orgsOidUsersIdDelete operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidUsersIdDeleteRequest
 */
export interface OrganizationApiOrgsOidUsersIdDeleteRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersIdDelete
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersIdDelete
     */
    readonly oid: string

    /**
     * user id
     * @type {number}
     * @memberof OrganizationApiOrgsOidUsersIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for orgsOidUsersIdPut operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidUsersIdPutRequest
 */
export interface OrganizationApiOrgsOidUsersIdPutRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersIdPut
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersIdPut
     */
    readonly oid: string

    /**
     * user id
     * @type {number}
     * @memberof OrganizationApiOrgsOidUsersIdPut
     */
    readonly id: number

    /**
     * user role
     * @type {OrgRole}
     * @memberof OrganizationApiOrgsOidUsersIdPut
     */
    readonly role: OrgRole
}

/**
 * Request parameters for orgsOidUsersInvitePost operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsOidUsersInvitePostRequest
 */
export interface OrganizationApiOrgsOidUsersInvitePostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersInvitePost
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof OrganizationApiOrgsOidUsersInvitePost
     */
    readonly oid: string

    /**
     * invite user
     * @type {OrgInvitesReq}
     * @memberof OrganizationApiOrgsOidUsersInvitePost
     */
    readonly invite: OrgInvitesReq
}

/**
 * Request parameters for orgsPost operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgsPostRequest
 */
export interface OrganizationApiOrgsPostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof OrganizationApiOrgsPost
     */
    readonly xCsrfToken: string

    /**
     * organization
     * @type {OrgOrganization}
     * @memberof OrganizationApiOrgsPost
     */
    readonly organization: OrgOrganization
}

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * list organization
     * @summary List the organizations
     * @param {OrganizationApiOrgsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsGet(requestParameters: OrganizationApiOrgsGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsGet(requestParameters.xCsrfToken, requestParameters.query, requestParameters.filter, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete Organization and data
     * @summary delete Organization
     * @param {OrganizationApiOrgsOidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidDelete(requestParameters: OrganizationApiOrgsOidDeleteRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidDelete(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get organization
     * @summary Get the organization
     * @param {OrganizationApiOrgsOidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidGet(requestParameters: OrganizationApiOrgsOidGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidGet(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update organization
     * @summary Update the organization
     * @param {OrganizationApiOrgsOidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidPut(requestParameters: OrganizationApiOrgsOidPutRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidPut(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list organization roles
     * @summary List the organizations roles
     * @param {OrganizationApiOrgsOidRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidRolesGet(requestParameters: OrganizationApiOrgsOidRolesGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidRolesGet(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * unstar organization
     * @summary UnStar the organization
     * @param {OrganizationApiOrgsOidStarDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidStarDelete(requestParameters: OrganizationApiOrgsOidStarDeleteRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidStarDelete(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * star organization
     * @summary Star the organization
     * @param {OrganizationApiOrgsOidStarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidStarPost(requestParameters: OrganizationApiOrgsOidStarPostRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidStarPost(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get organization task list
     * @summary Get the organization task list
     * @param {OrganizationApiOrgsOidTasksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidTasksGet(requestParameters: OrganizationApiOrgsOidTasksGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidTasksGet(requestParameters.xCsrfToken, requestParameters.oid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list users of the organization
     * @summary List users
     * @param {OrganizationApiOrgsOidUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidUsersGet(requestParameters: OrganizationApiOrgsOidUsersGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidUsersGet(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete user from organization
     * @summary Delete user from organization
     * @param {OrganizationApiOrgsOidUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidUsersIdDelete(requestParameters: OrganizationApiOrgsOidUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidUsersIdDelete(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update user role in organization
     * @summary Update user role in organization
     * @param {OrganizationApiOrgsOidUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidUsersIdPut(requestParameters: OrganizationApiOrgsOidUsersIdPutRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidUsersIdPut(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.id, requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * invite user to join the organization
     * @summary Invite user
     * @param {OrganizationApiOrgsOidUsersInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsOidUsersInvitePost(requestParameters: OrganizationApiOrgsOidUsersInvitePostRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsOidUsersInvitePost(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.invite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create organization
     * @summary Create the organization
     * @param {OrganizationApiOrgsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgsPost(requestParameters: OrganizationApiOrgsPostRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgsPost(requestParameters.xCsrfToken, requestParameters.organization, options).then((request) => request(this.axios, this.basePath));
    }
}
