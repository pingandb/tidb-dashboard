/* tslint:disable */
/* eslint-disable */
/**
 * Clinic Example API
 * This is a Clinic server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonFlushResponse } from '../models';
// @ts-ignore
import { CommonPreCreateResponse } from '../models';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagFlushPost: async (xCsrfToken: string, uuid: string, issue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('diagFlushPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('diagFlushPost', 'uuid', uuid)
            const localVarPath = `/diag/flush`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (issue !== undefined) {
                localVarQueryParameter['issue'] = issue;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagPrecreatePost: async (xCsrfToken: string, uuid: string, length: number, filename: string, file: any, alias?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('diagPrecreatePost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('diagPrecreatePost', 'uuid', uuid)
            // verify required parameter 'length' is not null or undefined
            assertParamExists('diagPrecreatePost', 'length', length)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('diagPrecreatePost', 'filename', filename)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('diagPrecreatePost', 'file', file)
            const localVarPath = `/diag/precreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (alias !== undefined) {
                localVarQueryParameter['alias'] = alias;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagUploadPost: async (xCsrfToken: string, uuid: string, sequence: number, length: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('diagUploadPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('diagUploadPost', 'uuid', uuid)
            // verify required parameter 'sequence' is not null or undefined
            assertParamExists('diagUploadPost', 'sequence', sequence)
            // verify required parameter 'length' is not null or undefined
            assertParamExists('diagUploadPost', 'length', length)
            const localVarPath = `/diag/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (sequence !== undefined) {
                localVarQueryParameter['sequence'] = sequence;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagFlushPost: async (oid: string, xCsrfToken: string, uuid: string, issue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidDiagFlushPost', 'oid', oid)
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidDiagFlushPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('orgsOidDiagFlushPost', 'uuid', uuid)
            const localVarPath = `/orgs/{oid}/diag/flush`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (issue !== undefined) {
                localVarQueryParameter['issue'] = issue;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagPrecreatePost: async (xCsrfToken: string, oid: string, uuid: string, length: number, filename: string, file: any, alias?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'oid', oid)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'uuid', uuid)
            // verify required parameter 'length' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'length', length)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'filename', filename)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('orgsOidDiagPrecreatePost', 'file', file)
            const localVarPath = `/orgs/{oid}/diag/precreate`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (alias !== undefined) {
                localVarQueryParameter['alias'] = alias;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagUploadPost: async (oid: string, xCsrfToken: string, uuid: string, sequence: number, length: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidDiagUploadPost', 'oid', oid)
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidDiagUploadPost', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('orgsOidDiagUploadPost', 'uuid', uuid)
            // verify required parameter 'sequence' is not null or undefined
            assertParamExists('orgsOidDiagUploadPost', 'sequence', sequence)
            // verify required parameter 'length' is not null or undefined
            assertParamExists('orgsOidDiagUploadPost', 'length', length)
            const localVarPath = `/orgs/{oid}/diag/upload`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (sequence !== undefined) {
                localVarQueryParameter['sequence'] = sequence;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diagFlushPost(xCsrfToken: string, uuid: string, issue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonFlushResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diagFlushPost(xCsrfToken, uuid, issue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diagPrecreatePost(xCsrfToken: string, uuid: string, length: number, filename: string, file: any, alias?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonPreCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diagPrecreatePost(xCsrfToken, uuid, length, filename, file, alias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diagUploadPost(xCsrfToken: string, uuid: string, sequence: number, length: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diagUploadPost(xCsrfToken, uuid, sequence, length, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidDiagFlushPost(oid: string, xCsrfToken: string, uuid: string, issue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonFlushResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidDiagFlushPost(oid, xCsrfToken, uuid, issue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidDiagPrecreatePost(xCsrfToken: string, oid: string, uuid: string, length: number, filename: string, file: any, alias?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonPreCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidDiagPrecreatePost(xCsrfToken, oid, uuid, length, filename, file, alias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidDiagUploadPost(oid: string, xCsrfToken: string, uuid: string, sequence: number, length: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidDiagUploadPost(oid, xCsrfToken, uuid, sequence, length, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagFlushPost(xCsrfToken: string, uuid: string, issue?: string, options?: any): AxiosPromise<CommonFlushResponse> {
            return localVarFp.diagFlushPost(xCsrfToken, uuid, issue, options).then((request) => request(axios, basePath));
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagPrecreatePost(xCsrfToken: string, uuid: string, length: number, filename: string, file: any, alias?: string, options?: any): AxiosPromise<CommonPreCreateResponse> {
            return localVarFp.diagPrecreatePost(xCsrfToken, uuid, length, filename, file, alias, options).then((request) => request(axios, basePath));
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagUploadPost(xCsrfToken: string, uuid: string, sequence: number, length: number, options?: any): AxiosPromise<string> {
            return localVarFp.diagUploadPost(xCsrfToken, uuid, sequence, length, options).then((request) => request(axios, basePath));
        },
        /**
         * call flush api after all parts of file are uploaded
         * @summary Flush
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {string} [issue] an optional issue Jira issue ID this package should be connected to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagFlushPost(oid: string, xCsrfToken: string, uuid: string, issue?: string, options?: any): AxiosPromise<CommonFlushResponse> {
            return localVarFp.orgsOidDiagFlushPost(oid, xCsrfToken, uuid, issue, options).then((request) => request(axios, basePath));
        },
        /**
         * precreate
         * @summary Precreate
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} length the size of the file
         * @param {string} filename actual name of the file
         * @param {any} file file
         * @param {string} [alias] an optional alias of filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagPrecreatePost(xCsrfToken: string, oid: string, uuid: string, length: number, filename: string, file: any, alias?: string, options?: any): AxiosPromise<CommonPreCreateResponse> {
            return localVarFp.orgsOidDiagPrecreatePost(xCsrfToken, oid, uuid, length, filename, file, alias, options).then((request) => request(axios, basePath));
        },
        /**
         * upload file part api
         * @summary Upload
         * @param {string} oid organization id
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} uuid a custom hash combining package’s filename, size and modify time
         * @param {number} sequence the serial number of the file part
         * @param {number} length the length of the file part
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidDiagUploadPost(oid: string, xCsrfToken: string, uuid: string, sequence: number, length: number, options?: any): AxiosPromise<string> {
            return localVarFp.orgsOidDiagUploadPost(oid, xCsrfToken, uuid, sequence, length, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for diagFlushPost operation in UploadApi.
 * @export
 * @interface UploadApiDiagFlushPostRequest
 */
export interface UploadApiDiagFlushPostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiDiagFlushPost
     */
    readonly xCsrfToken: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiDiagFlushPost
     */
    readonly uuid: string

    /**
     * an optional issue Jira issue ID this package should be connected to
     * @type {string}
     * @memberof UploadApiDiagFlushPost
     */
    readonly issue?: string
}

/**
 * Request parameters for diagPrecreatePost operation in UploadApi.
 * @export
 * @interface UploadApiDiagPrecreatePostRequest
 */
export interface UploadApiDiagPrecreatePostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly xCsrfToken: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly uuid: string

    /**
     * the size of the file
     * @type {number}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly length: number

    /**
     * actual name of the file
     * @type {string}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly filename: string

    /**
     * file
     * @type {any}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly file: any

    /**
     * an optional alias of filename
     * @type {string}
     * @memberof UploadApiDiagPrecreatePost
     */
    readonly alias?: string
}

/**
 * Request parameters for diagUploadPost operation in UploadApi.
 * @export
 * @interface UploadApiDiagUploadPostRequest
 */
export interface UploadApiDiagUploadPostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiDiagUploadPost
     */
    readonly xCsrfToken: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiDiagUploadPost
     */
    readonly uuid: string

    /**
     * the serial number of the file part
     * @type {number}
     * @memberof UploadApiDiagUploadPost
     */
    readonly sequence: number

    /**
     * the length of the file part
     * @type {number}
     * @memberof UploadApiDiagUploadPost
     */
    readonly length: number
}

/**
 * Request parameters for orgsOidDiagFlushPost operation in UploadApi.
 * @export
 * @interface UploadApiOrgsOidDiagFlushPostRequest
 */
export interface UploadApiOrgsOidDiagFlushPostRequest {
    /**
     * organization id
     * @type {string}
     * @memberof UploadApiOrgsOidDiagFlushPost
     */
    readonly oid: string

    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiOrgsOidDiagFlushPost
     */
    readonly xCsrfToken: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiOrgsOidDiagFlushPost
     */
    readonly uuid: string

    /**
     * an optional issue Jira issue ID this package should be connected to
     * @type {string}
     * @memberof UploadApiOrgsOidDiagFlushPost
     */
    readonly issue?: string
}

/**
 * Request parameters for orgsOidDiagPrecreatePost operation in UploadApi.
 * @export
 * @interface UploadApiOrgsOidDiagPrecreatePostRequest
 */
export interface UploadApiOrgsOidDiagPrecreatePostRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly oid: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly uuid: string

    /**
     * the size of the file
     * @type {number}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly length: number

    /**
     * actual name of the file
     * @type {string}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly filename: string

    /**
     * file
     * @type {any}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly file: any

    /**
     * an optional alias of filename
     * @type {string}
     * @memberof UploadApiOrgsOidDiagPrecreatePost
     */
    readonly alias?: string
}

/**
 * Request parameters for orgsOidDiagUploadPost operation in UploadApi.
 * @export
 * @interface UploadApiOrgsOidDiagUploadPostRequest
 */
export interface UploadApiOrgsOidDiagUploadPostRequest {
    /**
     * organization id
     * @type {string}
     * @memberof UploadApiOrgsOidDiagUploadPost
     */
    readonly oid: string

    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof UploadApiOrgsOidDiagUploadPost
     */
    readonly xCsrfToken: string

    /**
     * a custom hash combining package’s filename, size and modify time
     * @type {string}
     * @memberof UploadApiOrgsOidDiagUploadPost
     */
    readonly uuid: string

    /**
     * the serial number of the file part
     * @type {number}
     * @memberof UploadApiOrgsOidDiagUploadPost
     */
    readonly sequence: number

    /**
     * the length of the file part
     * @type {number}
     * @memberof UploadApiOrgsOidDiagUploadPost
     */
    readonly length: number
}

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * call flush api after all parts of file are uploaded
     * @summary Flush
     * @param {UploadApiDiagFlushPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public diagFlushPost(requestParameters: UploadApiDiagFlushPostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).diagFlushPost(requestParameters.xCsrfToken, requestParameters.uuid, requestParameters.issue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * precreate
     * @summary Precreate
     * @param {UploadApiDiagPrecreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public diagPrecreatePost(requestParameters: UploadApiDiagPrecreatePostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).diagPrecreatePost(requestParameters.xCsrfToken, requestParameters.uuid, requestParameters.length, requestParameters.filename, requestParameters.file, requestParameters.alias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * upload file part api
     * @summary Upload
     * @param {UploadApiDiagUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public diagUploadPost(requestParameters: UploadApiDiagUploadPostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).diagUploadPost(requestParameters.xCsrfToken, requestParameters.uuid, requestParameters.sequence, requestParameters.length, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * call flush api after all parts of file are uploaded
     * @summary Flush
     * @param {UploadApiOrgsOidDiagFlushPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public orgsOidDiagFlushPost(requestParameters: UploadApiOrgsOidDiagFlushPostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).orgsOidDiagFlushPost(requestParameters.oid, requestParameters.xCsrfToken, requestParameters.uuid, requestParameters.issue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * precreate
     * @summary Precreate
     * @param {UploadApiOrgsOidDiagPrecreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public orgsOidDiagPrecreatePost(requestParameters: UploadApiOrgsOidDiagPrecreatePostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).orgsOidDiagPrecreatePost(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.uuid, requestParameters.length, requestParameters.filename, requestParameters.file, requestParameters.alias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * upload file part api
     * @summary Upload
     * @param {UploadApiOrgsOidDiagUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public orgsOidDiagUploadPost(requestParameters: UploadApiOrgsOidDiagUploadPostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).orgsOidDiagUploadPost(requestParameters.oid, requestParameters.xCsrfToken, requestParameters.uuid, requestParameters.sequence, requestParameters.length, options).then((request) => request(this.axios, this.basePath));
    }
}
