/* tslint:disable */
/* eslint-disable */
/**
 * Clinic Example API
 * This is a Clinic server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonSuccessResp } from '../models';
// @ts-ignore
import { LoginOAuthInfoResp } from '../models';
// @ts-ignore
import { LoginValidation } from '../models';
// @ts-ignore
import { LoginValidationResp } from '../models';
/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * log out
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get oauth config
         * @summary Config the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {string} redirectUri the redirect_uri request parameter is used as a callback URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthNameInfoGet: async (name: 'internal' | 'ask_tug' | 'tidbcloud', redirectUri: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('loginOauthNameInfoGet', 'name', name)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('loginOauthNameInfoGet', 'redirectUri', redirectUri)
            const localVarPath = `/login/oauth/{name}/info`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * set auth header
         * @summary Validate the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {LoginValidation} validation validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthNameValidatePost: async (name: 'internal' | 'ask_tug' | 'tidbcloud', validation: LoginValidation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('loginOauthNameValidatePost', 'name', name)
            // verify required parameter 'validation' is not null or undefined
            assertParamExists('loginOauthNameValidatePost', 'validation', validation)
            const localVarPath = `/login/oauth/{name}/validate`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * log out
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSuccessResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get oauth config
         * @summary Config the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {string} redirectUri the redirect_uri request parameter is used as a callback URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOauthNameInfoGet(name: 'internal' | 'ask_tug' | 'tidbcloud', redirectUri: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOAuthInfoResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOauthNameInfoGet(name, redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * set auth header
         * @summary Validate the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {LoginValidation} validation validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOauthNameValidatePost(name: 'internal' | 'ask_tug' | 'tidbcloud', validation: LoginValidation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginValidationResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOauthNameValidatePost(name, validation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthApiFp(configuration)
    return {
        /**
         * log out
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLogoutPost(options?: any): AxiosPromise<CommonSuccessResp> {
            return localVarFp.loginLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * get oauth config
         * @summary Config the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {string} redirectUri the redirect_uri request parameter is used as a callback URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthNameInfoGet(name: 'internal' | 'ask_tug' | 'tidbcloud', redirectUri: string, options?: any): AxiosPromise<LoginOAuthInfoResp> {
            return localVarFp.loginOauthNameInfoGet(name, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * set auth header
         * @summary Validate the user
         * @param {'internal' | 'ask_tug' | 'tidbcloud'} name string enums
         * @param {LoginValidation} validation validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthNameValidatePost(name: 'internal' | 'ask_tug' | 'tidbcloud', validation: LoginValidation, options?: any): AxiosPromise<LoginValidationResp> {
            return localVarFp.loginOauthNameValidatePost(name, validation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for loginOauthNameInfoGet operation in OAuthApi.
 * @export
 * @interface OAuthApiLoginOauthNameInfoGetRequest
 */
export interface OAuthApiLoginOauthNameInfoGetRequest {
    /**
     * string enums
     * @type {'internal' | 'ask_tug' | 'tidbcloud'}
     * @memberof OAuthApiLoginOauthNameInfoGet
     */
    readonly name: 'internal' | 'ask_tug' | 'tidbcloud'

    /**
     * the redirect_uri request parameter is used as a callback URL
     * @type {string}
     * @memberof OAuthApiLoginOauthNameInfoGet
     */
    readonly redirectUri: string
}

/**
 * Request parameters for loginOauthNameValidatePost operation in OAuthApi.
 * @export
 * @interface OAuthApiLoginOauthNameValidatePostRequest
 */
export interface OAuthApiLoginOauthNameValidatePostRequest {
    /**
     * string enums
     * @type {'internal' | 'ask_tug' | 'tidbcloud'}
     * @memberof OAuthApiLoginOauthNameValidatePost
     */
    readonly name: 'internal' | 'ask_tug' | 'tidbcloud'

    /**
     * validation
     * @type {LoginValidation}
     * @memberof OAuthApiLoginOauthNameValidatePost
     */
    readonly validation: LoginValidation
}

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
    /**
     * log out
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public loginLogoutPost(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).loginLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get oauth config
     * @summary Config the user
     * @param {OAuthApiLoginOauthNameInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public loginOauthNameInfoGet(requestParameters: OAuthApiLoginOauthNameInfoGetRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).loginOauthNameInfoGet(requestParameters.name, requestParameters.redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * set auth header
     * @summary Validate the user
     * @param {OAuthApiLoginOauthNameValidatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public loginOauthNameValidatePost(requestParameters: OAuthApiLoginOauthNameValidatePostRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).loginOauthNameValidatePost(requestParameters.name, requestParameters.validation, options).then((request) => request(this.axios, this.basePath));
    }
}
